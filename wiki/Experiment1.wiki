#summary 実験: PCMデータのDAC出力波形シミュレーション

= 実験: PCMデータのDAC出力波形シミュレーション =

PCMデータのDAC出力波形をシミュレーションします。

= 1. PCMデータ準備 =

http://www.phileweb.com/review/column/image.php?id=118&row=1

「右上のPCMデータ」は
{{{
2,  3,  2,  1,  2,  3,  5,  6,  6,  5,  3
}}}

「右下のPCMデータ」は
{{{
2,  4,  5,  6,  6,  5,  4,  3,  3,  3,  5,  6,  8,  9, 11, 12, 12, 11, 10,  8,  6,  4
}}}

これら2つのデータをバイナリエディタで入力しWAVファイルを作成します。

(データを256倍したものを入力。この256倍処理は、本来はDACの中で、オーバーサンプル処理の丸め誤差を減らすために、オーバーサンプル処理の前段で行われます。DACの品種によって、また入力PCMデータの量子化ビット数によって、前処理で何倍されるかは異なってきます。本実験では実際にDACに出力するかわりにDAC出力波形を計算機上でシミュレーションする都合上、前処理として手動で256倍(8ビット左にシフト)します。)

(作ったWAVデータは、量子化ビット数16ビット、リトルエンディアンバイトオーダーなので、
16進数値が、16の位、1の位、4096の位、256の位の順に4個並んだ計2バイト(＝16ビット)の情報がPCMサンプル値1個分の情報になります。たとえば、「右上のPCMデータ」の最初のサンプル値である2は、256倍して10進法で512、16進法で0x0200となります。これをリトルエンディアンバイトオーダーに並び替えたデータ00 02をバイナリエディタに入力します。)

http://bitspersampleconv2.googlecode.com/files/stirling.png

図1: バイナリエディタでPCMデータを作成。

http://bitspersampleconv2.googlecode.com/files/01_2.png

図2: 入力したPCMデータをグラフにそのままプロット。

= 2. DAC出力波形のシミュレーション =

1で作ったPCMデータのDAC出力波形をシミュレーションします。
sndfile-resampleで8倍オーバーサンプルして出てきた波形をプロット。

http://bitspersampleconv2.googlecode.com/files/01x8_2.png

図3: DAC出力波形シミュレーション。

http://bitspersampleconv2.googlecode.com/files/01_01x8.png

図4: 元のPCMサンプル点とDAC出力波形(simulated)の関係。

= 考察 =

図3を見て、右上のPCMデータのDAC出力波形と右下のPCMデータのDAC出力波形のどちらが
「元のアナログ信号」に近い形状かを見比べます。

なんとも言えない感じであり、右下のPCMデータのほうが有利とは言いがたい。

これは、例としてあげられているデータが良くないのであって、量子化ビット数やサンプリング周波数を増やしても良くならないということではないです。

DACの技術解説などで、PCMデジタルデータをギザギザの波形で図示するのは、
実際のDAC出力波形からああいったギザギザの波形が出てくるわけではないので、
誤解を招く、あまりよろしくない表現であると考えます。